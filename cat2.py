# -*- coding: utf-8 -*-
"""CAT2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OIhccwIimagEV8sDUPIn8-H6s2RZl-Np

Importing necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt #matplotlib is used for plot the graphs,
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

"""Importing the dataset.
then running the dataset.
"""

from sklearn import datasets
dataset = datasets.load_breast_cancer()
print(dataset)

"""The dataset classifies tumors into two categories(malignant and benign).We have used the attributes 'mean area' and 'mean compactness' as random attributes."""

X = pd.DataFrame(dataset.data, columns=dataset.feature_names)
X = X[['mean area', 'mean compactness']]
y = pd.Categorical.from_codes(dataset.target, dataset.target_names)
y = pd.get_dummies(y, drop_first=True)

"""Hete we classify new data with undefined labels"""

X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2, random_state=1)

"""Here we aretraining the model.For effecient use of KNN Algorithm, we have created an instance of KNeighrboursClassifier that uses eucledian distance to determing the proximity betweeen neighbouring points."""

knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')
knn.fit(X_train, y_train)

"""predict whether the tumor is benign or malignant given its mean comactness and mean area."""

y_pred = knn.predict(X_test)

"""Visualising the class, Benign"""

sns.scatterplot(
    x='mean area',
    y='mean compactness',
    hue='benign',
    data=X_test.join(y_test, how='outer')
)

"""Visualising the class Malignant"""

plt.scatter(
    X_test['mean area'],
    X_test['mean compactness'],
    c=y_pred,
    cmap='coolwarm',
    alpha=0.7
)

"""Accuracy as performance measure"""

scaler = StandardScaler()
#Training the model
knn.fit(X_train, y_train)
#Predict testing set
y_pred = knn.predict(X_test)
#Check performance using accuracy
print(accuracy_score(y_test, y_pred))

"""

```
# This is formatted as code
```

Error Rate as performance measure
"""

y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
error_rate = 1 - accuracy
print (error_rate)